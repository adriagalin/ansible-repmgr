###################################################
# Replication Manager configuration file
###################################################

# Required configuration items
# ============================
#
# repmgr and repmgrd require these items to be configured:

# Cluster name - this will be used by repmgr to generate its internal
# schema (pattern: "repmgr_{cluster}"); while this name will be quoted
# to preserve case, we recommend using lower case and avoiding whitespace
# to facilitate easier querying of the repmgr views and tables.
# cluster={{ repmgr_cluster_name }}

# Node ID and name
# (Note: we recommend to avoid naming nodes after their initial
#  replication funcion, as this will cause confusion when e.g.
#  "standby2" is promoted to primary)
node_id={{ repmgr_node_id | mandatory }}           # a unique integer
node_name={{ repmgr_node_name }}  # an arbitrary (but unique) string; we recommend using
                 # the server's hostname or another identifier unambiguously
                 # associated with the server to avoid confusion

# Database connection information as a conninfo string
# This must be accessible to all servers in the cluster; for details see:
#   http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
conninfo='{{ repmgr_conninfo }}'

data_directory='{{ repmgr_postgresql_data_directory }}'


# Optional configuration items
# ============================

# Replication settings
# ---------------------

# when using cascading replication and a standby is to be connected to an
# upstream standby, specify that node's ID with 'upstream_node'. The node
# must exist before the new standby can be registered. If a standby is
# to connect directly to a primary node, this parameter is not required.
#
# upstream_node=0
{% if repmgr_upstream_node %}
upstream_node={{ repmgr_upstream_node }}
{% endif %}

# physical replication slots - PostgreSQL 9.4 and later only
# (default: 0)
#
use_replication_slots={% if repmgr_use_replication_slots | bool %}1{% else %}0{% endif %}

#
# NOTE: 'max_replication_slots' should be configured for at least the
# number of standbys which will connect to the primary.

# Logging and monitoring settings
# -------------------------------

# Log level: possible values are DEBUG, INFO, NOTICE, WARNING, ERR, ALERT, CRIT or EMERG
# (default: NOTICE)
log_level={{ repmgr_loglevel }}

# Logging facility: possible values are STDERR or - for Syslog integration - one of LOCAL0, LOCAL1, ..., LOCAL7, USER
# (default: STDERR)
log_facility={{ repmgr_logfacility }}

# stderr can be redirected to an arbitrary file:
#
#logfile='/var/log/repmgr.log'
{% if repmgr_logfile %}
log_file={{ repmgr_logfile }}
{% endif %}

# event notifications can be passed to an arbitrary external program
# together with the following parameters:
#
#   %n - node ID
#   %e - event type
#   %s - success (1 or 0)
#   %t - timestamp
#   %d - details
#
# the values provided for "%t" and "%d" will probably contain spaces,
# so should be quoted in the provided command configuration, e.g.:
#
# event_notification_command='/path/to/some/script %n %e %s "%t" "%d"'
event_notification_command='{{ repmgr_event_notification_command }}'

# By default, all notifications will be passed; the notification types
# can be filtered to explicitly named ones:
#
# event_notifications=master_register,standby_register,witness_create
{% if repmgr_event_notifications %}
event_notifications={{ repmgr_event_notifications | join(',') }}
{% endif %}

# Environment/command settings
# ----------------------------

# path to PostgreSQL binary directory (location of pg_ctl, pg_basebackup etc.)
# (if not provided, defaults to system $PATH)
# pg_bindir=/usr/bin/
{% if repmgr_pg_bindir %}
pg_bindir={{ repmgr_pg_bindir }}
{% endif %}

# external command options

# rsync_options=--archive --checksum --compress --progress --rsh="ssh -o \"StrictHostKeyChecking no\""
# ssh_options=-o "StrictHostKeyChecking no"
rsync_options={{ repmgr_rsync_options }}
ssh_options={{ repmgr_ssh_options }}

# external command arguments

# pg_ctl_options='-s'
# pg_basebackup_options='--xlog-method=s'
pg_ctl_options='{{ repmgr_pg_ctl_options }}'
pg_basebackup_options='{{ repmgr_pg_basebackup_options }}'

# Standby clone settings
# ----------------------
#
# These settings apply when cloning a standby (`repmgr standby clone`).

# Tablespaces can be remapped from one file system location to another:
#
# tablespace_mapping=/path/to/original/tablespace=/path/to/new/tablespace


# Failover settings (repmgrd)
# ---------------------------
#
# These settings are only applied when repmgrd is running.

# Number of attempts at what interval (in seconds) to try and
# connect to  a server to establish its status (e.g. master
# during failover)
reconnect_attempts={{ repmgr_reconnect_attempts }}
reconnect_interval={{ repmgr_reconnect_interval }}

# Autofailover options
failover={{ repmgr_failover }} # one of 'automatic', 'manual'
priority={{ repmgr_priority }} # a value of zero or less prevents the node being promoted to primary
promote_command='{{ repmgr_promote_command }}'
follow_command='{{ repmgr_follow_command }}'

# monitoring interval in seconds; default is 2
#
monitor_interval_secs={{ repmgr_monitor_interval_secs }}

# change wait time for primary; before we bail out and exit when the primary
# disappears, we wait 'reconnect_attempts' * 'retry_promote_interval_secs'
# seconds; by default this would be half an hour, as 'retry_promote_interval_secs'
# default value is 300)
#
primary_notification_timeout={{ repmgr_primary_notification_timeout }}

